"use client"

import { useState, useEffect } from "react"
import { Calendar, Users, Mail, MessageCircle, Download, Eye } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog"
import { storage } from "@/lib/storage"
import type { Client, Appointment } from "@/types"
import { useRouter } from "next/navigation"
import { Label } from "@/components/ui/label"
import { Switch } from "@/components/ui/switch"

export default function ClientSchedulesPage() {
  const [clients, setClients] = useState<Client[]>([])
  const [appointments, setAppointments] = useState<Appointment[]>([])
  const [selectedClient, setSelectedClient] = useState<string>("")
  const [selectedSchedule, setSelectedSchedule] = useState<string>("")
  const [isPreviewOpen, setIsPreviewOpen] = useState(false)
  const [showOnlyWithAppointments, setShowOnlyWithAppointments] = useState(true)

  const router = useRouter()

  useEffect(() => {
    setClients(storage.clients.getAll())
    setAppointments(storage.appointments.getAll())
  }, [])

  const generateClientSchedule = (clientId: string) => {
    const client = clients.find((c) => c.id === clientId)
    if (!client) return ""

    const clientAppointments = appointments
      .filter((apt) => apt.clientId === clientId)
      .sort((a, b) => a.date.getTime() - b.date.getTime())

    const upcomingAppointments = clientAppointments.filter((apt) => apt.date >= new Date())
    const pastAppointments = clientAppointments.filter((apt) => apt.date < new Date())

    return `
üìÖ PERSONAL APPOINTMENT SCHEDULE

üë§ Client: ${client.name}
üìß Email: ${client.email}
üì± Phone: ${client.phone}

üîÆ UPCOMING APPOINTMENTS (${upcomingAppointments.length}):
${
  upcomingAppointments.length > 0
    ? upcomingAppointments
        .map(
          (apt, index) =>
            `${index + 1}. ${apt.date.toLocaleDateString("en-US", {
              weekday: "long",
              year: "numeric",
              month: "long",
              day: "numeric",
            })} at ${apt.time} (${apt.duration} min)`,
        )
        .join("\n")
    : "No upcoming appointments scheduled"
}

üìã APPOINTMENT HISTORY (${pastAppointments.length}):
${
  pastAppointments.length > 0
    ? pastAppointments
        .slice(-5)
        .map(
          (apt, index) =>
            `${index + 1}. ${apt.date.toLocaleDateString("en-US", {
              weekday: "short",
              month: "short",
              day: "numeric",
            })} at ${apt.time} - ${apt.status}`,
        )
        .join("\n")
    : "No previous appointments"
}

üí° YOUR PREFERENCES:
‚Ä¢ Frequency: ${client.preferences.frequency}
‚Ä¢ Preferred Day: ${client.preferences.preferredDay}
‚Ä¢ Preferred Time: ${client.preferences.preferredTime || "Not specified"}
‚Ä¢ Special Notes: ${client.preferences.notes || "None"}

üìû CONTACT INFORMATION:
If you need to reschedule or have questions, please contact us.

Generated by MayTimeFlow Appointment Manager
    `.trim()
  }

  const shareViaEmail = (clientId: string) => {
    const client = clients.find((c) => c.id === clientId)
    if (!client) return

    const schedule = generateClientSchedule(clientId)
    const subject = encodeURIComponent(`Your Appointment Schedule - ${client.name}`)
    const body = encodeURIComponent(schedule)
    const mailto = `mailto:${client.email}?subject=${subject}&body=${body}`
    window.open(mailto)
  }

  const shareViaWhatsApp = (clientId: string) => {
    const schedule = generateClientSchedule(clientId)
    const text = encodeURIComponent(schedule)
    const whatsapp = `https://wa.me/?text=${text}`
    window.open(whatsapp, "_blank")
  }

  const downloadSchedule = (clientId: string) => {
    const client = clients.find((c) => c.id === clientId)
    if (!client) return

    const schedule = generateClientSchedule(clientId)
    const blob = new Blob([schedule], { type: "text/plain" })
    const url = URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = `${client.name.replace(/\s+/g, "_")}_Schedule.txt`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }

  const previewSchedule = (clientId: string) => {
    setSelectedClient(clientId)
    setSelectedSchedule(generateClientSchedule(clientId))
    setIsPreviewOpen(true)
  }

  const getClientStats = (clientId: string) => {
    const clientAppointments = appointments.filter((apt) => apt.clientId === clientId)
    const upcoming = clientAppointments.filter((apt) => apt.date >= new Date()).length
    const completed = clientAppointments.filter((apt) => apt.status === "completed").length
    const total = clientAppointments.length

    return { upcoming, completed, total }
  }

  const clientsToShow = clients.filter((client) => {
    const hasAppointments = appointments.some((apt) => apt.clientId === client.id)
    return showOnlyWithAppointments ? hasAppointments : true
  })

  return (
    <div className="min-h-screen bg-gray-50 p-4">
      <div className="max-w-6xl mx-auto">
        <Card>
          <CardHeader>
            <div className="flex items-center gap-2 mb-4">
              <Button
                variant="outline"
                size="sm"
                onClick={() => router.push("/")}
                className="bg-sage-400 hover:bg-sage-500 text-white border-none rounded-full"
              >
                ‚Üê Back to Home
              </Button>
            </div>
            <CardTitle className="text-2xl flex items-center gap-2">
              <Calendar className="w-6 h-6" />
              Client Schedules
            </CardTitle>
            <div className="flex items-center gap-2">
              <Label htmlFor="appointmentFilter" className="text-sm">
                Show only clients with appointments
              </Label>
              <Switch
                id="appointmentFilter"
                checked={showOnlyWithAppointments}
                onCheckedChange={setShowOnlyWithAppointments}
              />
            </div>
            <p className="text-gray-600">Generate and share personalized schedules with your clients</p>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {clientsToShow.map((client) => {
                const stats = getClientStats(client.id)
                return (
                  <Card key={client.id} className="hover:shadow-md transition-shadow">
                    <CardContent className="p-4">
                      <div className="flex items-start justify-between mb-3">
                        <div>
                          <h3 className="font-semibold text-lg">{client.name}</h3>
                          <p className="text-sm text-gray-600">{client.email}</p>
                          <p className="text-sm text-gray-600">{client.phone}</p>
                        </div>
                        <Badge className="bg-sage-100 text-sage-800 rounded-full">{client.preferences.frequency}</Badge>
                      </div>

                      <div className="grid grid-cols-3 gap-2 mb-4 text-center">
                        <div className="bg-blue-50 p-2 rounded">
                          <div className="text-lg font-bold text-blue-600">{stats.total}</div>
                          <div className="text-xs text-gray-600">Total</div>
                        </div>
                        <div className="bg-green-50 p-2 rounded">
                          <div className="text-lg font-bold text-green-600">{stats.upcoming}</div>
                          <div className="text-xs text-gray-600">Upcoming</div>
                        </div>
                        <div className="bg-purple-50 p-2 rounded">
                          <div className="text-lg font-bold text-purple-600">{stats.completed}</div>
                          <div className="text-xs text-gray-600">Done</div>
                        </div>
                      </div>

                      <div className="space-y-2">
                        <div className="flex gap-1">
                          <Button
                            size="sm"
                            onClick={() => previewSchedule(client.id)}
                            className="flex-1 bg-sage-400 hover:bg-sage-500 text-white rounded-full"
                          >
                            <Eye className="w-3 h-3 mr-1" />
                            Preview
                          </Button>
                          <Button
                            size="sm"
                            onClick={() => downloadSchedule(client.id)}
                            className="flex-1 bg-gray-500 hover:bg-gray-600 text-white rounded-full"
                          >
                            <Download className="w-3 h-3 mr-1" />
                            Download
                          </Button>
                        </div>
                        <div className="flex gap-1">
                          <Button
                            size="sm"
                            onClick={() => shareViaEmail(client.id)}
                            className="flex-1 bg-blue-500 hover:bg-blue-600 text-white rounded-full"
                          >
                            <Mail className="w-3 h-3 mr-1" />
                            Email
                          </Button>
                          <Button
                            size="sm"
                            onClick={() => shareViaWhatsApp(client.id)}
                            className="flex-1 bg-green-500 hover:bg-green-600 text-white rounded-full"
                          >
                            <MessageCircle className="w-3 h-3 mr-1" />
                            WhatsApp
                          </Button>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                )
              })}
            </div>

            {clients.length === 0 && (
              <div className="text-center py-8 text-gray-500">
                <Users className="w-12 h-12 mx-auto mb-4 text-gray-300" />
                <p>No clients found. Add clients first to generate schedules.</p>
                <Button
                  onClick={() => router.push("/clients")}
                  className="mt-4 bg-pink-400 hover:bg-pink-500 text-white rounded-full"
                >
                  Add Clients
                </Button>
              </div>
            )}

            <Dialog open={isPreviewOpen} onOpenChange={setIsPreviewOpen}>
              <DialogContent className="max-w-2xl bg-gray-50">
                <DialogHeader>
                  <DialogTitle className="text-2xl text-gray-900">
                    Schedule Preview - {clients.find((c) => c.id === selectedClient)?.name}
                  </DialogTitle>
                </DialogHeader>
                <div className="max-h-96 overflow-y-auto">
                  <pre className="whitespace-pre-wrap text-sm bg-white p-4 rounded border">{selectedSchedule}</pre>
                </div>
                <div className="flex gap-2 mt-4">
                  <Button
                    onClick={() => shareViaEmail(selectedClient)}
                    className="flex-1 bg-blue-500 hover:bg-blue-600 text-white rounded-full"
                  >
                    <Mail className="w-4 h-4 mr-2" />
                    Email to Client
                  </Button>
                  <Button
                    onClick={() => shareViaWhatsApp(selectedClient)}
                    className="flex-1 bg-green-500 hover:bg-green-600 text-white rounded-full"
                  >
                    <MessageCircle className="w-4 h-4 mr-2" />
                    Share via WhatsApp
                  </Button>
                </div>
              </DialogContent>
            </Dialog>
          </CardContent>
        </Card>
      </div>
    </div>
  )
}
